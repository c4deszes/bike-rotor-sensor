/**
 * Integration guideline:
 * Call `signal_rpc_receive(x)` whenever you receive a new byte
 * Implement `signal_rpc_write(x)`
 */

#pragma once

{% for signal in signals -%}
#define SIGNAL_RPC_{{ signal.name }}_ID {{signal.id}}
{% endfor -%}

typedef enum {
    SIGNAL_RPC_ERROR_INVALID_FRAME,         /**<  */
    SIGNAL_RPC_ERROR_INVALID_CHECKSUM,      /**< Checksum incorrect*/
    SIGNAL_RPC_ERROR_INVALID_COMMAND,       /**< Command not supported */
    SIGNAL_RPC_ERROR_INVALID_CALL,          /**< Invalid arguments*/
    SIGNAL_RPC_ERROR_TIMEOUT
} signal_rpc_error;

void _signal_rpc_receive(uint8_t data);
void _signal_rpc_write(uint8_t data);
void _signal_rpc_error(signal_rpc_error error);

// You have to implement these functions
{% for signal in signals -%}
{{signal.rtype}} signal_rpc_{{ signal.name }}(
    {%- if signal.args -%}
        {%- for arg in signal.args -%}
            {{arg.type}} {{arg.name}}
            {%- if not loop.last -%}
                ,
            {%- endif -%}
        {%- endfor -%}
    {%- else -%}
    void
    {%- endif -%}
);
{% endfor -%}
